package org.example;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Problem 12
 *
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1
 * + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 *
 */
public class App 
{
    public static void main( String[] args )
    {
        int numberOfFactors = 500;
        int result = getTriangleNumberWithNFactors(numberOfFactors);
        System.out.println("The number " + result + " has more than " + numberOfFactors + " factors");
    }

    public static int getTriangleNumberWithNFactors(int numberOfFactors) {
        int start = 1;
        int total = 0;
        int count = 0;

        // get the triangle numbers
        for (int i = start; ; i++) {
            total += i;

            // get the factors
            List<Integer> factors = new ArrayList<>();
            for (int j = 1; j <= total; j++) {
                if (total % j == 0) {
                    factors.add(j);
                }
            }

            if (factors.size() >= numberOfFactors) {
                return total;
            }
        }
    }
}
